{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","redux/contact/contact-selectors.js","components/Filter/Filter.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","components/ContactForm/ContactForm.js","redux/contact/contact-operations.js","components/ContactList/ContactList.js","views/ContactsView/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","getContacts","state","contacts","items","getFilter","filter","getLoading","loading","filteredContacts","createSelector","normalizedFilter","toLowerCase","name","includes","Filter","obj","dispatch","useDispatch","useSelector","contactSelectors","type","onChange","e","actions","target","ContactForm","onSubmit","number","contact","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","message","contactOperations","useState","setName","setNumber","className","styles","TaskEditor","preventDefault","find","alert","contactValidation","TaskEditor_label","TaskEditor_input","required","TaskEditor_button","ContactList","onDel","id","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","TaskList","map","TaskList_item","TaskList_button","onClick","ContactsView","useEffect","a","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError"],"mappings":"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","file":"static/js/contacts-view.e0551fd1.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__3G_1g\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__mB-b5\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__1baKP\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__2Tpsk\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__Y4xhz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__3Rp4K\",\"TaskList_item\":\"ContactList_TaskList_item__1ftZe\",\"completed\":\"ContactList_completed__1d7Oq\",\"TaskList_text\":\"ContactList_TaskList_text__2-T1E\",\"TaskList_actions\":\"ContactList_TaskList_actions__2U53J\",\"TaskList_button\":\"ContactList_TaskList_button__2cTDd\"};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\nexport const getLoading = (state) => state.contacts.loading;\r\nexport const getError = (state) => state.contacts.error;\r\n\r\nexport const filteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\n// export const filteredContacts = (state) => {\r\n//   const allContacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return allContacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(normalizedFilter)\r\n//   );\r\n// };\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/contact/contact-actions';\r\nimport * as contactSelectors from '../../redux/contact/contact-selectors';\r\n\r\nconst Filter = ({}) => {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(contactSelectors.getFilter);\r\n  const onFilter = (e) => dispatch(actions.contactFilter(e.target.value));\r\n\r\n  return (\r\n    <div>\r\n      Find contacts by name\r\n      <input type=\"text\" value={value} onChange={onFilter} />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   value: contactSelectors.getFilter(state),\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onFilter: (e) => dispatch(actions.contactFilter(e.target.value)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(Filter);\r\n\r\nexport default Filter;\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as contactOperations from '../../redux/contact/contact-operations';\r\nimport * as contactSelectors from '../../redux/contact/contact-selectors';\r\n\r\nconst ContactForm = () => {\r\n  const items = useSelector(contactSelectors.getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (name, number) =>\r\n    dispatch(contactOperations.contactAdd(name, number));\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChangeName = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n  const handleChangeNumber = (e) => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const contactValidation = () => {\r\n    if (items.find((contact) => name === contact.name)) {\r\n      alert(`${name} is already in contacts`);\r\n      return true;\r\n    }\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (contactValidation()) {\r\n      return;\r\n    }\r\n\r\n    onSubmit(name, number);\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className={styles.TaskEditor} onSubmit={handleSubmit}>\r\n        <label className={styles.TaskEditor_label}>\r\n          Name\r\n          <input\r\n            className={styles.TaskEditor_input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={handleChangeName}\r\n            required\r\n          />\r\n        </label>\r\n        <label className={styles.TaskEditor_label}>\r\n          Number\r\n          <input\r\n            className={styles.TaskEditor_input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={handleChangeNumber}\r\n            required\r\n          />\r\n        </label>\r\n        <button className={styles.TaskEditor_button}> Add contact</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n\r\n// ContactForm.propTypes = {\r\n//   onSubmit: PropTypes.func.isRequired,\r\n// };\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     items: contactSelectors.getContacts(state),\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     onSubmit: (name, number) =>\r\n//       dispatch(contactOperations.contactAdd(name, number)),\r\n//   };\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactForm);\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from './contact-actions';\r\n\r\nexport const fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n};\r\n\r\nexport const contactAdd = (name, number) => (dispatch) => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((error) => dispatch(addContactError(error.message)));\r\n};\r\n\r\nexport const contactDelete = (id) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch((error) => dispatch(deleteContactError(error.message)));\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactList.module.css';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport * as contactOperations from '../../redux/contact/contact-operations';\r\nimport * as contactSelectors from '../../redux/contact/contact-selectors';\r\n\r\nconst ContactList = () => {\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector(contactSelectors.filteredContacts);\r\n\r\n  const onDel = (id) => dispatch(contactOperations.contactDelete(id));\r\n\r\n  // useEffect(() => dispatch(contactOperations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <ul className={styles.TaskList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li className={styles.TaskList_item} key={id}>\r\n          {name} : {number}\r\n          {\r\n            <button\r\n              className={styles.TaskList_button}\r\n              type=\"button\"\r\n              name=\"delte\"\r\n              onClick={() => onDel(id)}\r\n            >\r\n              delete\r\n            </button>\r\n          }\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  onDel: PropTypes.func.isRequired,\r\n};\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   contacts: contactSelectors.filteredContacts(state),\r\n// });\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//   onDel: (id) => dispatch(contactOperations.contactDelete(id)),\r\n// });\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactList);\r\n\r\nexport default ContactList;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Filter from '../../components/Filter/Filter';\r\nimport { getLoading } from '../../redux/contact/contact-selectors';\r\nimport ContactForm from '../../components/ContactForm/ContactForm';\r\nimport ContactList from '../../components/ContactList/ContactList';\r\nimport * as contactOperations from '../../redux/contact/contact-operations';\r\n\r\nconst ContactsView = () => {\r\n  const loading = useSelector(getLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => dispatch(contactOperations.fetchContacts()), [dispatch]);\r\n\r\n  return (\r\n    <>\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      {loading && <h1>Загружаем ...</h1>}\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}